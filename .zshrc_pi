# env variables {{{

export EDITOR="vim"

# Path to your dotfiles.
export DOTFILES=$HOME/.dotfiles

export PATH="$HOME/.local/bin:$PATH"

# colored manpages with bat
export MANPAGER="sh -c 'col -bx | bat -l man -p'"

export TLDR_COLOR_NAME="magenta bold"
export TLDR_COLOR_DESCRIPTION="white"
export TLDR_COLOR_EXAMPLE="green"
export TLDR_COLOR_COMMAND="red bold"
export TLDR_COLOR_PARAMETER="cyan"

# }}}
# aliases {{{

alias aptu="sudo apt update && sudo apt upgrade"
alias apti="sudo apt install"
alias aptr="sudo apt remove"
alias aptl="apt list --installed"

alias c="clear"

# enable aliases to be sudo'ed
alias sudo="sudo "

# enable aliases to be xargs'ed
alias xargs="xargs "

alias v="vim"

# displays ip address
alias myip="curl http://ipecho.net/plain; echo"

# opens the zsh config file for editing
alias config="vim $DOTFILES/.zshrc_pi"

alias vconfig="vim $DOTFILES/.vimrc"

# reloads the terminal
alias reload="source $HOME/.zshrc"

# Stopwatch
alias timer='echo "Timer started. Stop with Ctrl-D." && date && time cat && date'

alias checksize="du -sch $HOME/* $HOME/.* | sort -hr"

alias grep="grep --color=auto -E"

# Make shell handle commands containing a leading $
alias "$"="$@"

# use different theme for bat
alias bat="bat --theme=TwoDark -m .zshrc_pi:zsh"

# colored help pages
alias bathelp="bat --plain --language=help"

# display units in mib bc pi doesn't have much memory :(
alias neofetch="neofetch --memory_unit 'mib'"

# disable autocorrect for certain commands
no_autocorrect=('cp' 'mv')
for c in $no_autocorrect; do
    alias "$c"="nocorrect $c"
done

# }}}
# fzf {{{

export FZF_DEFAULT_OPTS='--reverse --border --color=dark --color=fg:-1,bg:-1,hl:#c678dd,fg+:#ffffff,bg+:#4b5263,hl+:#d858fe --color=info:#98c379,prompt:#61afef,pointer:#be5046,marker:#e5c07b,spinner:#61afef,header:#61afef'

RG_IGNORES="!{node_modules,.git,.idea,__pycache__,Library,.venv,ios,android,.android,.cocoapods}"
export FZF_DEFAULT_COMMAND="rg --files --follow --no-ignore-vcs --hidden -g '$RG_IGNORES'"
export FZF_CTRL_T_COMMAND="rg --files -g '$RG_IGNORES' --sort path --null | xargs -0 dirname | uniq"

# Use rg instead of the default find command for listing path candidates.
# - The first argument to the function ($1) is the base path to start traversal
# - See the source code (completion.{bash,zsh}) for the details.
_fzf_compgen_path() {
  rg --files --follow --no-ignore-vcs --hidden -g "$RG_IGNORES"
}

# Use rg to generate the list for directory completion
_fzf_compgen_dir() {
  rg --files -g "$RG_IGNORES" --hidden --null | xargs -0 dirname | sort -u
}

function f() {
    cmd="$1"

    # if no arguments provided, just do fzf
    if [[ -z "$cmd" ]]; then
        fzf
    else
        # specify commands to search directories
        if [[ "$cmd" =~ "cd|code|charm" ]]; then
            dir=$(rg "$HOME" --files -g "$RG_IGNORES" --hidden --null | xargs -0 dirname | sort -u | fzf --preview "tree -C {}")

            if [[ -z "$dir" ]]; then
                return 1
            fi

            if [[ "$cmd" == "charm" ]]; then
                open -a "PyCharm.app" "$dir"
            else
                "$cmd" "$dir"
            fi
        else
            # otherwise normal fzf with bat preview
            file=$(rg "$HOME" --files --follow --no-ignore-vcs --hidden -g "$RG_IGNORES" | fzf --preview "bat --style=numbers --color=always {}")

            if [[ -z "$file" ]]; then
                return 1
            fi

            "$cmd" "$file"
        fi
    fi
}

# fzf in $PATH
function fp() {
    tr ':' '\n' <<< "$PATH" | xargs -I % find % -type f 2>/dev/null | fzf
}

function fman() {
    manpages=$(tr ':' '\n' <<< "$MANPATH" | xargs -I % find -L % -type f 2>/dev/null)
    mans=$(echo "$manpages" | sed -E 's/(\/|\.[1-7]$)/ /g' | awk 'NF{ print $NF }' | sort -u)
    page=$(echo "$mans" | fzf --exact)
    man "$page"
}

# }}}
# python {{{

alias py="python3"
alias pip="pip3"
alias venv="python3 -m venv .venv"
alias activate="source .venv/bin/activate"

# }}}
# ls {{{

eval `dircolors $DOTFILES/LS_COLORS`
alias ls="ls --color=auto -Fh"
alias la="ls -A"
alias ll="ls -l"
alias lla="ls -lA"

# }}}
# git {{{

alias ga="git add -A"
alias gac="git add -A && git commit -m"
alias gb="git branch"
alias gbd="git branch -d"
alias gc="git commit -m"
alias gco="git checkout"
alias gd="git diff --color | sed 's/^\([^-+ ]*\)[-+ ]/\\1/' | less -rFX"
alias gf="git fetch"
alias gl="git pull --prune"
alias glog="git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
alias grst="git reset ."
alias gp="git push"
alias gpu="git push -u origin"
alias gs="git status -sb"
alias gst="git stash -u"
alias gstd="git stash drop"
alias gstl="git stash list"
alias gstp="git stash pop"

function acp(){
    git add -A
    git commit -m "$1"
    git push
}

function gcob {
    git checkout -b "$1"
    git push -u origin "$1"
}

function ginit(){
    git init
    git remote add origin "$1"
    git add -A
    git commit -m "initial commit"
    git push -u origin main
}

# git diff with bat
function batdiff() {
    git diff --name-only --relative --diff-filter=d | xargs bat
}

# }}}
# misc functions {{{

function help() {
    "$@" --help 2>&1 | bathelp
}

function path() {
    echo $PATH | tr ':' '\n'
}

function mkcd() {
    mkdir -p "$1" && cd "$1";
}

# can do "up" or "up x"
function up {
    if [[ "$#" < 1 ]] ; then
        cd ..
    else
        CDSTR=""
        for i in {1..$1} ; do
            CDSTR="../$CDSTR"
        done
        cd $CDSTR
    fi
}

# Determine size of a file or total size of a directory
function fs() {
    if du -b /dev/null > /dev/null 2>&1; then
        local arg=-sbh;
    else
        local arg=-sh;
    fi
    if [[ -n "$@" ]]; then
        du $arg -- "$@";
    else
        du $arg .[^.]* ./* | sort -hr
    fi;
}

function weather() {
    city="$1"

    if [ -z "$city" ]; then
        city="Middlebury"
    fi

    eval "curl http://wttr.in/${city}"
}

# display a list of supported colors
function lscolors {
    ((cols = $COLUMNS - 4))
    s=$(printf %${cols}s)
    for i in {000..$(tput colors)}; do
        echo -e $i $(tput setaf $i; tput setab $i)${s// /=}$(tput op);
    done
}


# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRN;
}

# }}}
# prompt {{{
PROMPT="%B%F{green}%n@%m%f%b %B%F{red}%~%f%b %# "

# shows branch name on right if applicable
autoload -Uz vcs_info
precmd_vcs_info() { vcs_info }
precmd_functions+=( precmd_vcs_info )
setopt prompt_subst
RPROMPT=\$vcs_info_msg_0_
zstyle ':vcs_info:git:*' formats '%F{green}(%b)%f'
zstyle ':vcs_info:*' enable git

# }}}
# shell options {{{
export HISTFILE=$HOME/.zsh_history
export SAVEHIST=5000
export HISTSIZE=2000

setopt NO_CASE_GLOB
setopt AUTO_CD
# share history across multiple zsh sessions
setopt SHARE_HISTORY
# append to history
setopt APPEND_HISTORY
# adds commands as they are typed, not at shell exit
setopt INC_APPEND_HISTORY
# expire duplicates first
setopt HIST_EXPIRE_DUPS_FIRST
# do not store duplications
setopt HIST_IGNORE_DUPS
# iore duplicates when searching
setopt HIST_FIND_NO_DUPS
# removes blank lines from history
setopt HIST_REDUCE_BLANKS
setopt HIST_VERIFY
setopt CORRECT
setopt CORRECT_ALL

# }}}
# completion {{{
autoload -Uz compinit && compinit
# case insensitive path-completion
zstyle ':completion:*' matcher-list 'm:{[:lower:][:upper:]}={[:upper:][:lower:]}' 'm:{[:lower:][:upper:]}={[:upper:][:lower:]} l:|=* r:|=*' 'm:{[:lower:][:upper:]}={[:upper:][:lower:]} l:|=* r:|=*' 'm:{[:lower:][:upper:]}={[:upper:][:lower:]} l:|=* r:|=*'
# partial completion suggestions
zstyle ':completion:*' list-suffixeszstyle ':completion:*' expand prefix suffix
# }}}

# remove uniques from $PATH
typeset -aU path

source $HOME/.local/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

eval "$(zoxide init zsh)"
