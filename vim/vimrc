" Disable compatibility with vi which can cause unexpected issues.
set nocompatible

" Plugins
call plug#begin('~/.vim/plugged')

  " colorschemes
  Plug 'ayu-theme/ayu-vim'
  Plug 'nanotech/jellybeans.vim'
  Plug 'sonph/onehalf', { 'rtp': 'vim' }

  " tools
  Plug 'neoclide/coc.nvim', {'branch': 'release'}
  Plug 'junegunn/fzf.vim'
  Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
  Plug 'airblade/vim-gitgutter'
  Plug 'scrooloose/nerdcommenter'

call plug#end()

" MISC {{{
" remove all autocommands
augroup vimrc
  autocmd!
augroup END

" Sets how many lines of history VIM has to remember
set history=1000

" set undo history size
set undolevels=1000

" automatically re-read files if unmodified inside Vim
set autoread

" Enable file type detection
filetype plugin indent on

" enable mouse in all modes
set mouse=a

" Return to last edit position when opening files (You want this!)
autocmd vimrc BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

" strip trailing whitespace on save
autocmd vimrc BufWritePre * :call StripTrailingWhitespace()

" source vimrc when it is saved
autocmd vimrc BufWritePost $MYVIMRC source $MYVIMRC

" Set utf8 as standard encoding and en_US as the standard language
set encoding=utf8

" Use Unix as the standard file type
set ffs=unix,dos,mac

" }}}
" UI {{{
" Start scrolling four lines before the horizontal window border
set scrolloff=4

" Turn on the Wild menu
set wildmenu

" Make wildmenu behave like similar to Bash completion.
set wildmode=list:longest

" There are certain files that we would never want to edit with Vim.
" Wildmenu will ignore files with these extensions.
set wildignore=*.docx,*.jpg,*.png,*.gif,*.pdf,*.pyc,*.exe,*.o,*.img,*.xlsx

" Show the cursor position
set ruler

" Height of the command bar
set cmdheight=1

" Configure backspace so it acts as it should act
set backspace=eol,start,indent

" wrap lines with h and l
set whichwrap+=<,>,h,l

" Don't redraw while executing macros (good performance config)
set lazyredraw

" For regular expressions turn magic on
set magic

" Show matching brackets when text indicator is over them
set showmatch

" How many tenths of a second to blink when matching brackets
set mat=2

" match < and >
set matchpairs+=<:>

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" Show the current mode
set showmode

" Show the filename in the window titlebar
set title

" show command in bottom bar
set showcmd

" fold on {{{...}}}
set foldmethod=marker

" open all folds by default
autocmd vimrc BufRead,BufNewFile * normal zR

" opening splits
set splitbelow splitright

set number

" use different cursor style depending on mode
let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
let &t_SR = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=2\x7\<Esc>\\"
" }}}
" SEARCHING {{{
" Ignore case when searching
set ignorecase

" Override the ignorecase option if searching for capital letters.
" This will allow you to search specifically for capital letters.
set smartcase

" Highlight search results
set hlsearch
nohl

" Highlight dynamically as pattern is typed
set incsearch
" }}}
" COLORS {{{
set termguicolors

colorscheme jellybeans
let g:jellybeans_overrides = {
\    'Search': { 'guifg': 'ffb964', 'guibg': '503030', 'attr': '' },
\    'SignColumn': { 'guifg': '605958', 'guibg': '151515' },
\    'StatusLine': { 'guifg': 'c6b6ee', 'guibg': '272727' },
\    'StatusLineAdd': { 'guifg': '99ad6a', 'guibg': '272727'  },
\    'StatusLineChange': { 'guifg': '597bc5', 'guibg': '272727' },
\    'StatusLineDelete': { 'guifg': 'cf6a4c', 'guibg': '272727' },
\    'GitGutterAdd': { 'guifg': '99ad6a' },
\    'GitGutterChange': { 'guifg': '597bc5' },
\    'GitGutterDelete': { 'guifg': 'cf6a4c' },
\}

set background=dark

" Enable syntax highlighting
syntax enable
" }}}
" BACKUPS {{{
" Turn backup off, since most stuff is in SVN, git etc. anyway...
set nobackup
set nowritebackup

" swap file directory
set directory=~/.vim/swp//

" turn persistent undo on
" means that you can undo even when you close a buffer/VIM
try
  set undodir=~/.vim/undo//
  set undofile
catch
endtry
" }}}
" TABS/SPACES {{{

" 1 tab == 2 spaces by default
set shiftwidth=2
set tabstop=2
set softtabstop=2

" insert spaces whenever tab is pressed
set expandtab

set autoindent " Auto indent
set smartindent " Smart indent
" }}}
" STATUS LINE {{{
function! GitStatusA()
  let [a,_,_] = GitGutterGetHunkSummary()
  return printf('+%d', a)
endfunction

function! GitStatusM()
  let [_,m,_] = GitGutterGetHunkSummary()
  return printf('~%d', m)
endfunction

function! GitStatusR()
  let [_,_,r] = GitGutterGetHunkSummary()
  return printf('-%d', r)
endfunction

" set the status line
set statusline=%#StatusLine#			            " set highlighting
set statusline+=%2.2n\                        " buffer number
set statusline+=%.35F\                        " file name
set statusline+=%h%m%r%w\                     " flags
set statusline+=%{StatusLineGit()}\           " git branch
set statusline+=%#StatusLineAdd#
set statusline+=%{GitStatusA()}\              " number of lines added
set statusline+=%#StatusLineChange#
set statusline+=%{GitStatusM()}\              " number of lines modified
set statusline+=%#StatusLineDelete#
set statusline+=%{GitStatusR()}\ \            " number of lines removed
set statusline+=%#StatusLine#                 " set highlighting
set statusline+=%{strlen(&ft)?&ft:'none'}\ \  " file type
set statusline+=%{coc#status()}\              " syntax highlight group under cursor
set statusline+=%=\                           " indent to the right
set statusline+=%(%l/%L,%c%V%)\ \ %P\         " cursor position/offset

" always show status line
set laststatus=2
" }}}
" MAPPINGS {{{
" With a map leader it's possible to do extra key combinations
" like <leader>w saves the current file
let mapleader = " "

" Disable highlight when <leader><CR> is pressed
map <leader><CR> :noh<CR>

" Type jk to exit insert mode quickly
inoremap jk <esc>

" Don't use arrow keys
map <up> <nop>
map <down> <nop>
map <left> <nop>
map <right> <nop>

" Center the cursor vertically when moving to the next word during a search.
nnoremap n nzz
nnoremap N Nzz

" move vertically by visual line
nnoremap j gj
nnoremap k gk

" move to beginning/end of line
nnoremap H ^
vnoremap H ^
nnoremap L $
vnoremap L $

" mappings that toggle options
nnoremap <leader>c :set cursorline! cursorcolumn!<CR>
nnoremap <leader>t <Plug>ToggleNumber
nnoremap <leader>w :set wrap! wrap?<CR>
nnoremap <leader>gt :GitGutterToggle<CR>

" mappings that show lists of things, often with fzf
nnoremap <leader>b :Buffers<CR>
nnoremap <leader>h :History:<CR>
nnoremap <leader>l :Lines<CR>
nnoremap <leader>m :Marks<CR>
nnoremap <leader>f <Plug>FzfFiles
nnoremap <leader>F <Plug>FzfAllFiles
nnoremap <leader>r :registers<CR>
nnoremap <leader>rg :RG<CR>

" leader + y yanks to system clipboard
nnoremap <leader>y "+y
vnoremap <leader>y "+y
nnoremap <leader>Y "+Y
vnoremap <leader>Y "+Y

" leader + p pastes from system clipboard
nnoremap <leader>p "+p
vnoremap <leader>p "+p
nnoremap <leader>P "+P
vnoremap <leader>P "+P

" misc
nnoremap <leader>g <Plug>(coc-definition)
nnoremap <leader>gr <Plug>(coc-references)
nnoremap <leader>rn <Plug>(coc-rename)
nnoremap <leader>ac  <Plug>(coc-codeaction-cursor)
nnoremap <leader>d :call CocActionAsync('doHover')<CR>

nnoremap <leader>R :source $MYVIMRC<CR>

" opening splits
noremap <leader>v :Se!<CR><Plug>FzfFiles
noremap <leader>x :Se<CR><Plug>FzfFiles

" use J/K to move visual blocks
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv

" indent visually selected blocks
vnoremap < <gv
vnoremap > >gv

" Smart way to move between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l


" Useful mappings for managing tabs
map <leader>tt :tabnew<CR>
map <leader>to :tabonly<CR>
map <leader>tc :tabclose<CR>
map <leader>tn :tabnext<CR>
map <leader>tp :tabprevious<CR>

" Let 'tl' toggle between this and the last accessed tab
let g:lasttab = 1
nmap <leader>tl :exe "tabn ".g:lasttab<CR>
autocmd vimrc TabLeave * let g:lasttab = tabpagenr()

" Opens a new tab with the current buffer's path
" Super useful when editing files in the same directory
map <leader>te :tabedit <C-r>=expand("%:p:h")<CR>/<CR>

" cd to the directory of the open buffer
map <leader>cd :<C-U>cd %:h <Bar> pwd<CR>
" }}}
" PLUGINS {{{
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'

" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1

" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1

" ctrl-/ toggles comments
map <C-_> <Plug>NERDCommenterToggle

" don't define any gitgutter mappings by default
let g:gitgutter_map_keys = 0

" show if fold contains changed text
set foldtext=gitgutter#fold#foldtext()

let g:fzf_layout = { 'window': { 'width': 1, 'height': 0.5, 'relative': v:true, 'yoffset': 1.0 } }
let g:fzf_preview_window = ['right,50%', 'ctrl-/']

" use tab/s-tab to select next completion, <cr> to confirm
inoremap <expr> <cr> coc#pum#visible() ? coc#pum#confirm() : "\<CR>"
inoremap <expr> <Tab> coc#pum#visible() ? coc#pum#next(1) : "\<Tab>"
inoremap <expr> <S-Tab> coc#pum#visible() ? coc#pum#prev(1) : "\<S-Tab>"

" Map function and class text objects
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)
" }}}
