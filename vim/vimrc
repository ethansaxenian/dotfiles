" Disable compatibility with vi which can cause unexpected issues.
set nocompatible

" Plugins
call plug#begin('~/.vim/plugged')

  Plug 'bfrg/vim-cpp-modern'
  Plug 'vim-python/python-syntax'
  Plug 'pangloss/vim-javascript'
  Plug 'MaxMEllon/vim-jsx-pretty'
  Plug 'leafgarland/typescript-vim'
  Plug 'scrooloose/nerdtree'
  Plug 'scrooloose/nerdcommenter'
  Plug 'airblade/vim-gitgutter'
  Plug 'tpope/vim-fugitive'
  Plug 'junegunn/fzf.vim'
  Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
  Plug 'fatih/vim-go'
  Plug 'valloric/youcompleteme'

call plug#end()

" MISC {{{
" remove all autocommands
autocmd!

" Sets how many lines of history VIM has to remember
set history=1000

" set undo history size
set undolevels=1000

" automatically re-read files if unmodified inside Vim
set autoread

" Enable file type detection
filetype plugin indent on

" enable mouse in all modes
set mouse=a

" Return to last edit position when opening files (You want this!)
autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

" Set utf8 as standard encoding and en_US as the standard language
set encoding=utf8

" Use Unix as the standard file type
set ffs=unix,dos,mac

" use the system clipboard as the default
set clipboard=unnamed
" }}}
" UI {{{
" Start scrolling four lines before the horizontal window border
set scrolloff=4

" Turn on the Wild menu
set wildmenu

" Make wildmenu behave like similar to Bash completion.
set wildmode=list:longest

" There are certain files that we would never want to edit with Vim.
" Wildmenu will ignore files with these extensions.
set wildignore=*.docx,*.jpg,*.png,*.gif,*.pdf,*.pyc,*.exe,*.o,*.img,*.xlsx

" Show the cursor position
set ruler

" Height of the command bar
set cmdheight=1

" Configure backspace so it acts as it should act
set backspace=eol,start,indent

" wrap lines with h and l
set whichwrap+=<,>,h,l

" Don't redraw while executing macros (good performance config)
set lazyredraw

" For regular expressions turn magic on
set magic

" Show matching brackets when text indicator is over them
set showmatch

" How many tenths of a second to blink when matching brackets
set mat=2

" match < and >
set matchpairs+=<:>

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" Show the current mode
set showmode

" Show the filename in the window titlebar
set title

" show command in bottom bar
set showcmd

set foldmethod=marker

augroup folding
  autocmd!
  autocmd BufRead,BufNewFile * normal zR
augroup END

set splitbelow splitright

set number
" }}}
" SEARCHING {{{
" Ignore case when searching
set ignorecase

" Override the ignorecase option if searching for capital letters.
" This will allow you to search specifically for capital letters.
set smartcase

" Highlight search results
set hlsearch
nohl

" Highlight dynamically as pattern is typed
set incsearch
" }}}
" COLORS {{{
set termguicolors

colorscheme mycolors

set background=dark

" Enable syntax highlighting
syntax enable
" }}}
" BACKUPS {{{
" Turn backup off, since most stuff is in SVN, git etc. anyway...
set nobackup
set nowritebackup

" swap file directory
set directory=~/.vim/swp//

" turn persistent undo on
" means that you can undo even when you close a buffer/VIM
try
  set undodir=~/.vim/undo//
  set undofile
catch
endtry
" }}}
" TABS/SPACES {{{

" 1 tab == 2 spaces by default
set shiftwidth=2
set tabstop=2
set softtabstop=2

" insert spaces whenever tab is pressed
set expandtab

set autoindent " Auto indent
set smartindent " Smart indent
" }}}
" STATUS LINE {{{
function! SyntaxItem()
  return synIDattr(synID(line("."), col("."), 1), "name")
endfunction

function! GitStatusA()
  let [a,_,_] = GitGutterGetHunkSummary()
  return printf('+%d', a)
endfunction

function! GitStatusM()
  let [_,m,_] = GitGutterGetHunkSummary()
  return printf('~%d', m)
endfunction

function! GitStatusR()
  let [_,_,r] = GitGutterGetHunkSummary()
  return printf('-%d', r)
endfunction

" set the status line
set statusline=%#StatusLinePurple#			     " set highlighting
set statusline+=%2.2n\                       " buffer number
set statusline+=%#StatusLineRed#             " set highlighting
set statusline+=%.35F\                       " file name
set statusline+=%#StatusLinePurple#          " set highlighting
set statusline+=%h%m%r%w\                    " flags
set statusline+=%{FugitiveStatusline()}\     " git branch
set statusline+=%#GitAddedSL#
set statusline+=%{GitStatusA()}\             " number of lines added
set statusline+=%#GitModifiedSL#
set statusline+=%{GitStatusM()}\             " number of lines modified
set statusline+=%#GitRemovedSL#
set statusline+=%{GitStatusR()}\ \           " number of lines removed
set statusline+=%#StatusLinePurple#          " set highlighting
set statusline+=%{strlen(&ft)?&ft:'none'}\ \ " file type
set statusline+=%{SyntaxItem()}\             " syntax highlight group under cursor
set statusline+=%=\                          " indent to the right
set statusline+=%#StatusLinePurple#          " set highlighting
set statusline+=%(%l/%L,%c%V%)\ \ %P\        " cursor position/offset

set laststatus=2
" }}}
" MAPPINGS {{{
" With a map leader it's possible to do extra key combinations
" like <leader>w saves the current file
let mapleader = ","

" Disable highlight when <leader><CR> is pressed
map <leader><CR> :noh<CR>

" Type jk to exit insert mode quickly
inoremap jk <esc>


" Center the cursor vertically when moving to the next word during a search.
nnoremap n nzz
nnoremap N Nzz

" move vertically by visual line
nnoremap j gj
nnoremap k gk

" move to beginning/end of line
nnoremap H ^
vnoremap H ^
nnoremap L $
vnoremap L $

nnoremap cH c^
nnoremap cL c$


nnoremap <leader>b :Buffers<CR>
nnoremap <leader>c :set cursorline! cursorcolumn!<CR>
nnoremap <leader>f <Plug>FzfFiles
nnoremap <leader>F <Plug>FzfAllFiles
nnoremap <leader>g :RG<CR>
nnoremap <leader>G  :YcmCompleter GoTo<CR>
nnoremap <leader>h :History:<CR>
nnoremap <leader>l :Lines<CR>
nnoremap <leader>m :Marks<CR>
nnoremap <leader>n :NERDTreeFocus<CR>
nnoremap <leader>r :registers<CR>
nnoremap <leader>R :source $MYVIMRC<CR>
nnoremap <leader>t <Plug>ToggleNumber
nnoremap <leader>w :set wrap! wrap?<CR>


" Don't use arrow keys
map <up> <nop>
map <down> <nop>
map <left> <nop>
map <right> <nop>

" indent visually selected blocks
vnoremap < <gv
vnoremap > >gv

" opening splits
noremap <leader>v :Se!<CR><Plug>FzfFilesFull
noremap <leader>x :Se<CR><Plug>FzfFilesFull

" Smart way to move between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" space open/closes folds
nnoremap <space> za

" Useful mappings for managing tabs
map <leader>tt :tabnew<CR>
map <leader>to :tabonly<CR>
map <leader>tc :tabclose<CR>
map <leader>tn :tabnext<CR>
map <leader>tp :tabprevious<CR>

" Let 'tl' toggle between this and the last accessed tab
let g:lasttab = 1
nmap <leader>tl :exe "tabn ".g:lasttab<CR>
au TabLeave * let g:lasttab = tabpagenr()

" Opens a new tab with the current buffer's path
" Super useful when editing files in the same directory
map <leader>te :tabedit <C-r>=expand("%:p:h")<CR>/<CR>

" cd to the directory of the open buffer
map <leader>cd :<C-U>cd %:h <Bar> pwd<CR>
" }}}
" PLUGINS {{{

let NERDTreeIgnore = ['\.git$[[dir]]', 'node_modules[[dir]]', '\.DS_Store', '\.idea[[dir]]', '__pycache__[[dir]]', 'build[[dir]]', 'venv$[[dir]]', '\.o$', '\.so$', '\.dSYM$']
let NERDTreeWinPos = "left"
let NERDTreeWinSize = 50

" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'

" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1

" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1

" ctrl-/ toggles comments
map <C-_> <Plug>NERDCommenterToggle

" match sign column to number column background color
autocmd ColorScheme * highlight! link SignColumn LineNr
let g:gitgutter_set_sign_backgrounds = 1

" don't define any gitgutter mappings by default
let g:gitgutter_map_keys = 0

" show if fold contains changed text
set foldtext=gitgutter#fold#foldtext()

let g:ycm_autoclose_preview_window_after_completion=1

let g:fzf_layout = { 'window': { 'width': 1, 'height': 0.5, 'relative': v:true, 'yoffset': 1.0 } }
let g:fzf_preview_window = ['right,50%', 'ctrl-/']
" }}}
